(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
	typeof define === 'function' && define.amd ? define('ng-angular', ['exports', '@angular/core', 'rxjs'], factory) :
	(factory((global['ng-angular'] = {}),global.ng.core,global.rxjs));
}(this, (function (exports,core,rxjs) { 'use strict';

var Web3 = require('web3');
var ansible = require('ansiblejs');
var ansibleRelayAbi = require('../ansible_relay.abi');
var SignedState = /** @class */ (function () {
    function SignedState() {
    }
    return SignedState;
}());
var AnsibleEvent = /** @class */ (function () {
    function AnsibleEvent() {
    }
    return AnsibleEvent;
}());
var AnsibleService = /** @class */ (function () {
    function AnsibleService() {
        var _this = this;
        this.ansibleRelayAddress = "0x0";
        this.relayID = 0;
        this.FULL_RANGE = { fromBlock: 0, toBlock: 'latest' };
        this.checkAndInstantiateWeb3 = function () {
            if (typeof window.web3 !== 'undefined') {
                console.warn('Using web3 detected from external source. If you find that your accounts don\'t appear or you have 0 MetaCoin, ensure you\'ve configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask');
                _this.web3 = new Web3(window.web3.currentProvider);
            }
            else {
                _this.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
            }
        };
        this.checkAndInstantiateWeb3();
        this.ansibleRelay = this.web3.eth.contract(ansibleRelayAbi).at(this.ansibleRelayAddress);
        this.getAccounts().subscribe(function (accs) {
            _this.accounts = accs;
            _this.account = _this.accounts[0];
        }, function (err) { return alert(err); });
    }
    AnsibleService.prototype.signInitialAnsible = function (speaker, data) {
        var state = this.createInitialState(speaker, data);
        return this.sign(state);
    };
    AnsibleService.prototype.createInitialState = function (speaker, data) {
        var state = [];
        state = ansible.appendUint16(state, this.relayID);
        state = ansible.appendAddress(state, speaker);
        state.concat(data);
        return state;
    };
    AnsibleService.prototype.createAnsibleState = function (ansibleID, data) {
        var state = [];
        state = ansible.appendUint16(state, this.relayID);
        state = ansible.appendUint64(state, ansibleID);
        state.concat(data);
        return state;
    };
    AnsibleService.prototype.signAnsibleState = function (ansibleID, data) {
        var state = this.createAnsibleState(ansibleID, data);
        return this.sign(state);
    };
    AnsibleService.prototype.sign = function (data) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.web3.eth.sign(_this.account, data, function (error, sig) {
                if (!error) {
                    var signedState = new SignedState();
                    signedState.data = sig.substr(2, sig.length);
                    signedState.rs = ['0x' + signedState.data.substr(0, 64)];
                    signedState.ss = ['0x' + signedState.data.substr(64, 64)];
                    signedState.vs = [parseInt(signedState.data.substr(128, 2), 16)];
                    observer.next(signedState);
                }
                else {
                    observer.error(error);
                }
            });
        });
    };
    AnsibleService.prototype.getAccounts = function () {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.web3.eth.getAccounts(function (err, accs) {
                if (err != null) {
                    observer.error('There was an error fetching your accounts.');
                }
                if (accs.length === 0) {
                    observer.error('Couldn\'t get any accounts! Make sure your Ethereum client is configured correctly.');
                }
                observer.next(accs);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.get = function (ansibleID) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.getAnsible.call(ansibleID, function (err, result) {
                if (err != null) {
                    observer.error(err);
                    return;
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.open = function (speaker, state, deposit) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.openAnsible.call(speaker, state.data, state.vs, state.rs, state.ss, { value: deposit }, function (err, result) {
                if (err != null) {
                    observer.error(err);
                    return;
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.join = function (ansibleID, state, deposit) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.joinAnsible.call(ansibleID, state.data, state.vs, state.rs, state.ss, { value: deposit }, function (err, result) {
                if (err != null) {
                    observer.error(err);
                    return;
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.challenge = function (ansibleID, one, two) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.challenge.call(ansibleID, one.data, one.vs, one.rs, one.ss, two.data, two.vs, two.rs, two.ss, function (err, result) {
                if (err != null) {
                    observer.error(err);
                    return;
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.challengeState = function (ansibleID, one) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.challengeState.call(ansibleID, one.data, one.vs, one.rs, one.ss, function (err, result) {
                if (err != null) {
                    observer.error(err);
                    return;
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.checkpoint = function (ansibleID, enforceExpiry, state) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.checkpoint.call(ansibleID, enforceExpiry, state.data, state.vs, state.rs, state.ss, function (err, result) {
                if (err != null) {
                    observer.error(err);
                    return;
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.claimExpiry = function (ansibleID) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.claimExpiry.call(ansibleID, function (err, result) {
                if (err != null) {
                    observer.error(err);
                    return;
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.close = function (ansibleID, state) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.closeAnsible.call(ansibleID, state.data, state.rs, state.vs, state.ss, function (err, result) {
                if (err != null) {
                    observer.error(err);
                }
                observer.next(result);
                observer.complete();
            });
        });
    };
    AnsibleService.prototype.getSpeakerEvents = function (speaker) {
        var indices = { speaker: speaker };
        return this.getEvents(indices);
    };
    AnsibleService.prototype.getAnsibleEvents = function (id) {
        var indices = { id: id };
        return this.getEvents(indices);
    };
    AnsibleService.prototype.getEvents = function (indices) {
        var _this = this;
        var count = 0;
        var max = 6;
        var events = [];
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleOpened(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    events.concat(data.json());
                    count++;
                    if (count == max) {
                        observer.next(events);
                        observer.complete();
                    }
                }
            });
            _this.ansibleRelay.events.AnsibleJoined(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    events.concat(data.json());
                    count++;
                    if (count == max) {
                        observer.next(events);
                        observer.complete();
                    }
                }
            });
            _this.ansibleRelay.events.AnsibleClosed(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    events.concat(data.json());
                    count++;
                    if (count == max) {
                        observer.next(events);
                        observer.complete();
                    }
                }
            });
            _this.ansibleRelay.events.AnsibleExpired(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    events.concat(data.json());
                    count++;
                    if (count == max) {
                        observer.next(events);
                        observer.complete();
                    }
                }
            });
            _this.ansibleRelay.events.AnsibleCheckpoint(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    events.concat(data.json());
                    count++;
                    if (count == max) {
                        observer.next(events);
                        observer.complete();
                    }
                }
            });
            _this.ansibleRelay.events.AnsibleChallenged(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    events.concat(data.json());
                    count++;
                    if (count == max) {
                        observer.next(events);
                        observer.complete();
                    }
                }
            });
        });
    };
    AnsibleService.prototype.getSpeakerOpens = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleOpened(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getSpeakerCloses = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClosed(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getSpeakerChallenges = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleChallenged(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getSpeakerClaims = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClaimed(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getSpeakerJoins = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleJoined(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getSpeakerCheckpoints = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleCheckpoint(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getAnsibleOpens = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleOpened(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getAnsibleCloses = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClosed(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getAnsibleChallenges = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleChallenged(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getAnsibleClaims = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClaimed(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getAnsibleJoins = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleJoined(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.getAnsibleCheckpoints = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleCheckpoints(indices, _this.FULL_RANGE).get(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchSpeakerOpens = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleOpened(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchSpeakerCloses = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClosed(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchSpeakerChallenges = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleChallenged(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchSpeakerClaims = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClaimed(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchSpeakerJoins = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleJoined(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchSpeakerCheckpoints = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleCheckpoint(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchAnsibleCloses = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClosed(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchAnsibleChallenges = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleChallenged(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchAnsibleClaims = function (speaker) {
        var _this = this;
        var indices = { speaker: speaker };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleClaimed(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchAnsibleJoins = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleJoined(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchAnsibleCheckpoints = function (id) {
        var _this = this;
        var indices = { id: id };
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleCheckpoint(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    AnsibleService.prototype.watchSpeakerEvents = function (speaker) {
        var indices = { speaker: speaker };
        return this.watchEvents(indices);
    };
    AnsibleService.prototype.watchAnsibleEvents = function (id) {
        var indices = { id: id };
        return this.watchEvents(indices);
    };
    AnsibleService.prototype.watchEvents = function (indices) {
        var _this = this;
        return rxjs.Observable.create(function (observer) {
            _this.ansibleRelay.events.AnsibleOpened(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
            _this.ansibleRelay.events.AnsibleJoined(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
            _this.ansibleRelay.events.AnsibleClosed(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
            _this.ansibleRelay.events.AnsibleExpired(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
            _this.ansibleRelay.events.AnsibleCheckpoint(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
            _this.ansibleRelay.events.AnsibleChallenged(indices).watch(function (error, data) {
                if (error) {
                    observer.error(error);
                }
                else {
                    observer.next(data.json());
                }
            });
        });
    };
    return AnsibleService;
}());
AnsibleService.decorators = [
    { type: core.Injectable, args: [{
                providedIn: 'root'
            },] },
];
AnsibleService.ctorParameters = function () { return []; };
AnsibleService.ngInjectableDef = core.defineInjectable({ factory: function AnsibleService_Factory() { return new AnsibleService(); }, token: AnsibleService, providedIn: "root" });

exports.SignedState = SignedState;
exports.AnsibleEvent = AnsibleEvent;
exports.AnsibleService = AnsibleService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-angular.umd.js.map
