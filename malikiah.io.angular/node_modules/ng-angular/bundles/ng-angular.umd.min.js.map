{
  "version": 3,
  "file": "ng-angular.umd.min.js",
  "sources": [
    "ng://ng-angular/out/lib/ansible.service.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n//import { environment } from '../environments/environment';\n\nconst Web3 = require('web3');\nlet ansible = require('ansiblejs');\n\nlet ansibleRelayAbi = require('../ansible_relay.abi');\n\nexport class SignedState {\n    data : string;\n    vs : Array<number>;\n    rs : Array<string>;\n    ss : Array<string>;\n}\n\nexport class AnsibleEvent {\n    address : string;\n    blockNumber : number;\n    transactionIndex : number;\n    transactionHash : string;\n    blockHash : string;\n    logIndex : number;\n    removed : boolean;\n    event : string;\n    args : Object;\n}\n\ndeclare let require: any;\ndeclare let window: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnsibleService {\n\n    private account : string;\n    private accounts : Array<string>;\n\n    private ansibleRelay : any;\n    private ansibleRelayAddress : string = \"0x0\";\n\n    private web3: any;\n\n    private relayID = 0;\n\n    private FULL_RANGE = { fromBlock: 0, toBlock: 'latest' };\n\n    constructor(){\n        this.checkAndInstantiateWeb3();\n        this.ansibleRelay = this.web3.eth.contract(ansibleRelayAbi).at(this.ansibleRelayAddress);\n        this.getAccounts().subscribe(accs => {\n            this.accounts = accs;\n            this.account = this.accounts[0];\n        }, err => alert(err));\n    }\n\n    checkAndInstantiateWeb3 = () => {\n        // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n        if (typeof window.web3 !== 'undefined') {\n          console.warn(\n            'Using web3 detected from external source. If you find that your accounts don\\'t appear or you have 0 MetaCoin, ensure you\\'ve configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask'\n          );\n          // Use Mist/MetaMask's provider\n          this.web3 = new Web3(window.web3.currentProvider);\n        } else {\n            this.web3 = new Web3(\n              new Web3.providers.HttpProvider(\"http://localhost:8545\")\n           );\n          /*console.warn(\n            'No web3 detected. Falling back to ${environment.HttpProvider}. You should remove this fallback when you deploy live, as it\\'s inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask'\n          );\n          // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n          this.web3 = new Web3(\n            new Web3.providers.HttpProvider(environment.HttpProvider)\n         );*/\n\n        }\n    };\n\n    public signInitialAnsible(speaker : string, data) : Observable<SignedState> {\n        let state = this.createInitialState(speaker, data);\n        return this.sign(state);\n    }\n\n    public createInitialState(speaker : string, data) {\n        let state = [];\n        state = ansible.appendUint16(state, this.relayID);\n        state = ansible.appendAddress(state, speaker);\n        state.concat(data);\n        return state;\n    }\n\n    public createAnsibleState(ansibleID : number, data) {\n        let state = [];\n        state = ansible.appendUint16(state, this.relayID);\n        state = ansible.appendUint64(state, ansibleID);\n        state.concat(data);\n        return state;\n    }\n\n    public signAnsibleState(ansibleID : number, data) : Observable<SignedState> {\n        let state = this.createAnsibleState(ansibleID, data);\n        return this.sign(state);\n    }\n\n    private sign(data) : Observable<SignedState> {\n         return Observable.create(observer => {\n            this.web3.eth.sign(this.account, data, function(error,sig) {\n                if (!error) {\n                    let signedState = new SignedState();\n                    // sig is the returned signature. Separate out the signature components:\n                    signedState.data = sig.substr(2, sig.length);\n                    signedState.rs = ['0x' + signedState.data.substr(0, 64)];\n                    signedState.ss = ['0x' + signedState.data.substr(64, 64)];\n                    signedState.vs = [parseInt(signedState.data.substr(128, 2), 16)];\n                    observer.next(signedState);\n                } else {\n                    observer.error(error);\n                }\n             });\n         });\n     }\n\n     getAccounts(): Observable<any> {\n       \treturn Observable.create(observer => {\n       \t    this.web3.eth.getAccounts((err, accs) => {\n       \t        if (err != null) {\n       \t            observer.error('There was an error fetching your accounts.')\n       \t        }\n\n       \t        if (accs.length === 0) {\n       \t            observer.error('Couldn\\'t get any accounts! Make sure your Ethereum client is configured correctly.')\n       \t        }\n\n       \t        observer.next(accs)\n       \t        observer.complete();\n       \t    });\n       \t})\n      }\n\n    public get(ansibleID : number) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.getAnsible.call(ansibleID,\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                        return;\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public open(speaker : string, state : SignedState, deposit : number) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.openAnsible.call(speaker,\n                state.data, state.vs, state.rs, state.ss,\n                {value: deposit},\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                        return;\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public join(ansibleID : number, state : SignedState, deposit : number) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.joinAnsible.call(ansibleID,\n                state.data, state.vs, state.rs, state.ss,\n                {value: deposit},\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                        return;\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public challenge(ansibleID : number, one : SignedState, two : SignedState) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.challenge.call(ansibleID,\n                one.data, one.vs, one.rs, one.ss,\n                two.data, two.vs, two.rs, two.ss,\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                        return;\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public challengeState(ansibleID : number, one : SignedState) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.challengeState.call(ansibleID,\n                one.data, one.vs, one.rs, one.ss,\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                        return;\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public checkpoint(ansibleID : number, enforceExpiry : boolean, state : SignedState) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.checkpoint.call(ansibleID, enforceExpiry,\n                state.data, state.vs, state.rs, state.ss,\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                        return;\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public claimExpiry(ansibleID : number) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.claimExpiry.call(ansibleID,\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                        return;\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public close(ansibleID : number, state : SignedState) : Observable<boolean> {\n        return Observable.create(observer => {\n            this.ansibleRelay.closeAnsible.call(ansibleID,\n                state.data, state.rs, state.vs, state.ss,\n                function (err, result) {\n                    if (err != null) {\n                        observer.error(err);\n                    }\n                    observer.next(result);\n                    observer.complete();\n                }\n            );\n        });\n    }\n\n    public getSpeakerEvents(speaker : string) : Observable<Array<AnsibleEvent>>{\n        let indices = {speaker : speaker};\n        return this.getEvents(indices);\n    }\n\n    public getAnsibleEvents(id : number) : Observable<Array<AnsibleEvent>>{\n        let indices = {id : id};\n        return this.getEvents(indices);\n    }\n\n    private getEvents(indices : Object) : Observable<Array<AnsibleEvent>> {\n        let count = 0;\n        let max = 6;\n        let events : Array<AnsibleEvent> = [];\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleOpened(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    events.concat(data.json());\n                    count++;\n                    if (count == max) {\n                        observer.next(events);\n                        observer.complete();\n                    }\n                }\n            });\n            this.ansibleRelay.events.AnsibleJoined(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    events.concat(data.json());\n                    count++;\n                    if (count == max) {\n                        observer.next(events);\n                        observer.complete();\n                    }\n                }\n            });\n            this.ansibleRelay.events.AnsibleClosed(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    events.concat(data.json());\n                    count++;\n                    if (count == max) {\n                        observer.next(events);\n                        observer.complete();\n                    }\n                }\n            });\n            this.ansibleRelay.events.AnsibleExpired(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    events.concat(data.json());\n                    count++;\n                    if (count == max) {\n                        observer.next(events);\n                        observer.complete();\n                    }\n                }\n            });\n            this.ansibleRelay.events.AnsibleCheckpoint(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    events.concat(data.json());\n                    count++;\n                    if (count == max) {\n                        observer.next(events);\n                        observer.complete();\n                    }\n                }\n            });\n            this.ansibleRelay.events.AnsibleChallenged(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    events.concat(data.json());\n                    count++;\n                    if (count == max) {\n                        observer.next(events);\n                        observer.complete();\n                    }\n                }\n            });\n        });\n    }\n\n    public getSpeakerOpens(speaker : string) : Observable<Array<AnsibleEvent>> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleOpened(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getSpeakerCloses(speaker : string) : Observable<Array<AnsibleEvent>> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClosed(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getSpeakerChallenges(speaker : string) : Observable<Array<AnsibleEvent>> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleChallenged(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getSpeakerClaims(speaker : string) : Observable<Array<AnsibleEvent>> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClaimed(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getSpeakerJoins(speaker : string) : Observable<Array<AnsibleEvent>> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleJoined(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getSpeakerCheckpoints(speaker : string) : Observable<Array<AnsibleEvent>> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleCheckpoint(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getAnsibleOpens(id : number) : Observable<Array<AnsibleEvent>> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleOpened(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getAnsibleCloses(id : number) : Observable<Array<AnsibleEvent>> {\n        let indices = {id: id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClosed(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getAnsibleChallenges(id : number) : Observable<Array<AnsibleEvent>> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleChallenged(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getAnsibleClaims(id : number) : Observable<Array<AnsibleEvent>> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClaimed(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getAnsibleJoins(id : number) : Observable<Array<AnsibleEvent>> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleJoined(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public getAnsibleCheckpoints(id : number) : Observable<Array<AnsibleEvent>> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleCheckpoints(indices, this.FULL_RANGE).get((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n\n    public watchSpeakerOpens(speaker : string) : Observable<AnsibleEvent> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleOpened(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchSpeakerCloses(speaker : string) : Observable<AnsibleEvent> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClosed(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchSpeakerChallenges(speaker : string) : Observable<AnsibleEvent> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleChallenged(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchSpeakerClaims(speaker : string) : Observable<AnsibleEvent> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClaimed(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchSpeakerJoins(speaker : string) : Observable<AnsibleEvent> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleJoined(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchSpeakerCheckpoints(speaker : string) : Observable<AnsibleEvent> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleCheckpoint(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchAnsibleCloses(id : number) : Observable<AnsibleEvent> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClosed(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchAnsibleChallenges(id : number) : Observable<AnsibleEvent> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleChallenged(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchAnsibleClaims(speaker : string) : Observable<AnsibleEvent> {\n        let indices = {speaker: speaker};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleClaimed(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchAnsibleJoins(id : number) : Observable<AnsibleEvent> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleJoined(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchAnsibleCheckpoints(id : number) : Observable<AnsibleEvent> {\n        let indices = {id : id};\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleCheckpoint(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n    public watchSpeakerEvents(speaker : string) {\n        let indices = { speaker: speaker};\n        return this.watchEvents(indices);\n    }\n\n    public watchAnsibleEvents(id : number) {\n        let indices = {id: id};\n        return this.watchEvents(indices)\n    }\n\n    private watchEvents(indices : Object) : Observable<AnsibleEvent> {\n        return Observable.create(observer => {\n            this.ansibleRelay.events.AnsibleOpened(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n            this.ansibleRelay.events.AnsibleJoined(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n            this.ansibleRelay.events.AnsibleClosed(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n            this.ansibleRelay.events.AnsibleExpired(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n            this.ansibleRelay.events.AnsibleCheckpoint(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n            this.ansibleRelay.events.AnsibleChallenged(indices).watch((error, data) => {\n                if (error) {\n                    observer.error(error);\n                } else {\n                    observer.next(data.json());\n                }\n            });\n        });\n    }\n\n}\n"
  ],
  "names": [
    "Web3",
    "require",
    "ansible",
    "ansibleRelayAbi",
    "SignedState",
    "AnsibleEvent",
    "AnsibleService",
    "_this",
    "this",
    "ansibleRelayAddress",
    "relayID",
    "FULL_RANGE",
    "fromBlock",
    "toBlock",
    "checkAndInstantiateWeb3",
    "window",
    "web3",
    "console",
    "warn",
    "currentProvider",
    "providers",
    "HttpProvider",
    "ansibleRelay",
    "eth",
    "contract",
    "at",
    "getAccounts",
    "subscribe",
    "accs",
    "accounts",
    "account",
    "err",
    "alert",
    "prototype",
    "signInitialAnsible",
    "speaker",
    "data",
    "state",
    "createInitialState",
    "sign",
    "appendUint16",
    "appendAddress",
    "concat",
    "createAnsibleState",
    "ansibleID",
    "appendUint64",
    "signAnsibleState",
    "Observable",
    "create",
    "observer",
    "error",
    "sig",
    "signedState",
    "substr",
    "length",
    "rs",
    "ss",
    "vs",
    "parseInt",
    "next",
    "complete",
    "get",
    "getAnsible",
    "call",
    "result",
    "open",
    "deposit",
    "openAnsible",
    "value",
    "join",
    "joinAnsible",
    "challenge",
    "one",
    "two",
    "challengeState",
    "checkpoint",
    "enforceExpiry",
    "claimExpiry",
    "close",
    "closeAnsible",
    "getSpeakerEvents",
    "indices",
    "getEvents",
    "getAnsibleEvents",
    "id",
    "count",
    "events",
    "AnsibleOpened",
    "json",
    "AnsibleJoined",
    "AnsibleClosed",
    "AnsibleExpired",
    "AnsibleCheckpoint",
    "AnsibleChallenged",
    "getSpeakerOpens",
    "getSpeakerCloses",
    "getSpeakerChallenges",
    "getSpeakerClaims",
    "AnsibleClaimed",
    "getSpeakerJoins",
    "getSpeakerCheckpoints",
    "getAnsibleOpens",
    "getAnsibleCloses",
    "getAnsibleChallenges",
    "getAnsibleClaims",
    "getAnsibleJoins",
    "getAnsibleCheckpoints",
    "AnsibleCheckpoints",
    "watchSpeakerOpens",
    "watch",
    "watchSpeakerCloses",
    "watchSpeakerChallenges",
    "watchSpeakerClaims",
    "watchSpeakerJoins",
    "watchSpeakerCheckpoints",
    "watchAnsibleCloses",
    "watchAnsibleChallenges",
    "watchAnsibleClaims",
    "watchAnsibleJoins",
    "watchAnsibleCheckpoints",
    "watchSpeakerEvents",
    "watchEvents",
    "watchAnsibleEvents",
    "type",
    "Injectable",
    "args",
    "providedIn"
  ],
  "mappings": "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"
}
