import { Observable } from 'rxjs';
export declare class SignedState {
    data: string;
    vs: Array<number>;
    rs: Array<string>;
    ss: Array<string>;
}
export declare class AnsibleEvent {
    address: string;
    blockNumber: number;
    transactionIndex: number;
    transactionHash: string;
    blockHash: string;
    logIndex: number;
    removed: boolean;
    event: string;
    args: Object;
}
export declare class AnsibleService {
    private account;
    private accounts;
    private ansibleRelay;
    private ansibleRelayAddress;
    private web3;
    private relayID;
    private FULL_RANGE;
    constructor();
    checkAndInstantiateWeb3: () => void;
    signInitialAnsible(speaker: string, data: any): Observable<SignedState>;
    createInitialState(speaker: string, data: any): any[];
    createAnsibleState(ansibleID: number, data: any): any[];
    signAnsibleState(ansibleID: number, data: any): Observable<SignedState>;
    private sign(data);
    getAccounts(): Observable<any>;
    get(ansibleID: number): Observable<boolean>;
    open(speaker: string, state: SignedState, deposit: number): Observable<boolean>;
    join(ansibleID: number, state: SignedState, deposit: number): Observable<boolean>;
    challenge(ansibleID: number, one: SignedState, two: SignedState): Observable<boolean>;
    challengeState(ansibleID: number, one: SignedState): Observable<boolean>;
    checkpoint(ansibleID: number, enforceExpiry: boolean, state: SignedState): Observable<boolean>;
    claimExpiry(ansibleID: number): Observable<boolean>;
    close(ansibleID: number, state: SignedState): Observable<boolean>;
    getSpeakerEvents(speaker: string): Observable<Array<AnsibleEvent>>;
    getAnsibleEvents(id: number): Observable<Array<AnsibleEvent>>;
    private getEvents(indices);
    getSpeakerOpens(speaker: string): Observable<Array<AnsibleEvent>>;
    getSpeakerCloses(speaker: string): Observable<Array<AnsibleEvent>>;
    getSpeakerChallenges(speaker: string): Observable<Array<AnsibleEvent>>;
    getSpeakerClaims(speaker: string): Observable<Array<AnsibleEvent>>;
    getSpeakerJoins(speaker: string): Observable<Array<AnsibleEvent>>;
    getSpeakerCheckpoints(speaker: string): Observable<Array<AnsibleEvent>>;
    getAnsibleOpens(id: number): Observable<Array<AnsibleEvent>>;
    getAnsibleCloses(id: number): Observable<Array<AnsibleEvent>>;
    getAnsibleChallenges(id: number): Observable<Array<AnsibleEvent>>;
    getAnsibleClaims(id: number): Observable<Array<AnsibleEvent>>;
    getAnsibleJoins(id: number): Observable<Array<AnsibleEvent>>;
    getAnsibleCheckpoints(id: number): Observable<Array<AnsibleEvent>>;
    watchSpeakerOpens(speaker: string): Observable<AnsibleEvent>;
    watchSpeakerCloses(speaker: string): Observable<AnsibleEvent>;
    watchSpeakerChallenges(speaker: string): Observable<AnsibleEvent>;
    watchSpeakerClaims(speaker: string): Observable<AnsibleEvent>;
    watchSpeakerJoins(speaker: string): Observable<AnsibleEvent>;
    watchSpeakerCheckpoints(speaker: string): Observable<AnsibleEvent>;
    watchAnsibleCloses(id: number): Observable<AnsibleEvent>;
    watchAnsibleChallenges(id: number): Observable<AnsibleEvent>;
    watchAnsibleClaims(speaker: string): Observable<AnsibleEvent>;
    watchAnsibleJoins(id: number): Observable<AnsibleEvent>;
    watchAnsibleCheckpoints(id: number): Observable<AnsibleEvent>;
    watchSpeakerEvents(speaker: string): Observable<AnsibleEvent>;
    watchAnsibleEvents(id: number): Observable<AnsibleEvent>;
    private watchEvents(indices);
}
